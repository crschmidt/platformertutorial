-- gravity pulling the player down in pixel units/sË†2
local gravity = -20

-- take-off speed when jumping in pixel units/s
local jump_takeoff_speed = 900

local velocity = 400

local level = 1

touch_jump_timeout = .2

function init(self)
    -- this tells the engine to send input to on_input() in this script
    msg.post(".", "acquire_input_focus")
    msg.post("camera", "acquire_camera_focus")
    msg.post("@system:", "toggle_physics_debug")

    -- save the starting position
    self.position = go.get_position()

    -- keep track of movement vector and if there is ground contact
    self.velocity = vmath.vector3(0, 0, 0)
    self.ground_contact = false
    self.last_horiz = 1

    self.touch_jump_timer = 0 
end

function final(self)
    -- Return input focus when the object is deleted
    msg.post(".", "release_input_focus")
    msg.post("camera", "release_camera_focus")
end

function update(self, dt)
    self.last_velocity = vmath.vector3(self.velocity)
    local gravity = vmath.vector3(0, gravity, 0)

    if self.move_left then
        self.last_horiz = -1
        self.velocity.x = -velocity
    elseif self.move_right then
        self.last_horiz = 1
        self.velocity.x = velocity
    else
        self.velocity.x = 0
        
    end
    if not self.ground_contact then
        -- Apply gravity if there's no ground contact
        self.velocity = self.velocity + gravity
    end

    -- apply velocity to the player character
    go.set_position(go.get_position() + self.velocity * dt)
        
    -- reset volatile state
    
    self.correction = vmath.vector3()
    self.ground_contact = false
    if self.touch_jump_timer > 0 then
        self.touch_jump_timer = self.touch_jump_timer - dt
    end
    
end

local function handle_geometry_contact(self, normal, distance) 
    -- project the correction vector onto the contact normal
    -- (the correction vector is the 0-vector for the first contact point)
    local proj = vmath.dot(self.correction, normal)
    -- calculate the compensation we need to make for this contact point
    local comp = (distance - proj) * normal
    -- add it to the correction vector
    self.correction = self.correction + comp
    -- apply the compensation to the player character
    go.set_position(go.get_position() + comp)
    -- check if the normal points enough up to consider the player standing on the ground
    -- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
    if normal.y > 0.7 then
        self.ground_contact = true
    end
    -- project the velocity onto the normal
    proj = vmath.dot(self.velocity, normal)
    -- if the projection is negative, it means that some of the velocity points towards the contact point
    if proj < 0 then
        -- remove that component in that case
        self.velocity = self.velocity - proj * normal
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("contact_point_response") then
        -- check if we received a contact point message. One message for each contact point
        if message.group == hash("ground") then
            handle_geometry_contact(self, message.normal, message.distance)
        end
    end
end

local function jump(self)
    -- only allow jump from ground
    if self.ground_contact then
        -- set take-off speed
        self.velocity.y = jump_takeoff_speed
    end
end

local function abort_jump(self)
    -- cut the jump short if we are still going up
    if self.velocity.y > 0 then
        -- scale down the upwards speed
        self.velocity.y = self.velocity.y * 0.5
    end
end

function on_input(self, action_id, action)
    if action_id == hash("trigger") then
        if action.pressed then
            jump(self)
        elseif action.released then
            abort_jump(self)
        end
    end

    if action_id == hash("left") then
        if action.pressed then
            self.move_left = true
        elseif action.released then
            self.move_left = false
        end
    elseif action_id == hash("right") then
        if action.pressed then
            self.move_right = true
        elseif action.released then
            self.move_right = false
        end
    end

end

function on_reload(self)
end
